00000000000000000000000000010001				#sub r0, r0, r0 //r0 = 0
00000100000000000000000000010000                #addi r0, r0, 16 // r0 = 16 (b = 16)
00000000001000010000100000010001                #sub r1, r1, r1 //r1 = 0
00000100001000010000000000000100                #addi r1, r1, 4 //r1 = 4 (u = 4)
00000000010000100001000000010001                #sub r2, r2, r2 //r2 = 0
00000100010000100000000000000100                #addi r2, r2, 4 //r2 = 4 (c = 4)
00000011111111111111100000010001                #sub r31, r31, r31 //r31 = 0
00000000011000110001100000010001                #sub r3, r3, r3 //r3 = 0
00011111111000110000000000000000                #lw r3, r31, 0 // r3 = Mem[0] = U3 = ukey(127 downto 96)
00100011111000110000000000000111                #sw r3, r31, 7 // Mem[7] = L[3] = r3 = ukey(127 downto 96)
00011111111000110000000000000001                #lw r3, r31, 1 //r3 = Mem[1] = U2 = ukey(95 downto 64)
00100011111000110000000000000110                #sw r3, r31, 6 // Mem[6] = L[2] = r3 = ukey(95 downto 64)
00011111111000110000000000000010                #lw r3, r31, 2 // r3 = Mem[2] = U1 = ukey(63 downto 32)
00100011111000110000000000000101                #sw r3, r31, 5 //Mem[5] = L[1] = r3 = ukey( 63 downto 32)
00011111111000110000000000000011                #lw r3, r31, 3 // r3 = Mem[3] = U0 = ukey(31 downto 0)
00100011111000110000000000000100                #sw r3, r31, 4 // Mem[4] = L[0] = r3 = ukey(31 downto 0)
00000000011000110001100000010001                #sub r3, r3, r3 // r3 = 0
00000100011000110000000000011001                #addi r3, r3, 25 // r3 = 25 (t = 26)
00011111111001000000000000001000                #lw r4, r31, 8 // r4 = Mem[8] = Pw
00100011111001000000000000001010                #sw r4, r31, 10 // Mem[10] = S[0] = r4 = Pw
00011111111001000000000000001001                #lw r4, r31, 9 // r4 = Mem[9] = Qw
00000000101001010010100000010001                #sub r5, r5, r5 // r5 = 0 (i = 0)
00011100101001100000000000001010                #LOOP:lw r6, r5, 10 // r6 = Mem[10+r5] = S[r5] = (S[i-1] = r6)
00000000110001000011000000010000                #add r6, r4, r6 // r6 = r6 + r4 = S[r5] + Qw ( S[i-1] + Qw)
00000100101001010000000000000001                #addi r5, r5, 1 // r5 += 1 (i += 1)
00100000101001100000000000001010                #sw r6, r5, 10 // Mem[10+r5] = S[r5] = S[i] = r6 (S[i] = S[i-1] + Qw)
00101100011001011111111111111011                #bne r5, r3, -5 // PC = 22
00000000101001010010100000010001                #sub r5, r5, r5 // r5 = 0 (i = 0)
00000000110001100011000000010001                #sub r6, r6, r6 // r6 = 0 (j = 0)
00000000111001110011100000010001                #sub r7, r7, r7 // r7 = 0 (A = 0)
00000001000010000100000000010001                #sub r8, r8, r8 // r8 = 0 (b = 0)
00000011110111101111000000010001                #sub r30, r30, r30 // r30 = 0 (k = 0)
00000011101111011110100000010001                #sub r29, r29, r29 // r29 = 0
00000111101111010000000001001110                #addi r29, r29, 78 // r29 = 78
00000011100111001110000000010001                #sub r28, r28, r28 // r28 = 0
00000111100111000000000000011010                #addi r28, r28, 26 // r28 = 26
00011100101010010000000000001010                #LOOP:lw r9, r5, 10 // r9 = Mem[10+r5] = S[i]
00000001000001110101000000010000                #add r10, r7, r8 // r10 = r7 + r8 (A+B)
00000001001010100011100000010000                #add r7, r10, r9 // r7 = r9 + r10 (A = S[i] + A + B)
00011000111010010000000000011101                #shr r9, r7, 29 // r9 = 0…0xxx of A
00010100111001110000000000000011                #shl r7, r7, 3 // r7 = x…x000 of A
00000000111010010011100000010000                #add r7, r9, r7 // r7 = r7 + r9 (A = (S[i]+A+B)<<<3)
00100000101001110000000000001010                #sw r7, r5, 10 // Mem[10+r5] = r7 (S[i] = (S[i]+A+B)<<<3)
00011100110010010000000000000100                #lw r9, r6, 4 // r9 = Mem[4+r6] = L[j]
00000001000001110101000000010000                #add r10, r7, r8 // r10 = r7 + r8 = A+B (S[i]+A+B+B)
00000001001010100100000000010000                #add r8, r10, r9 // r8 = r9 + r10 (B = L[j] + A + B)
00010101010010100000000000011011                #shl r10, r10, 27 // (A+B)<<27
00011001010010100000000000011011                #shr r10, r10, 27 // (A+B)>>27 ((A+B)(4 downto 0))
00000011111111111111100000010001                #sub r31, r31, r31 // r31 = 0
00101001010111110000000000111111                #beq r31, r10, // if (A+B = 0), jmp
00000111111111110000000000000001                #addi r31, r31, 1 // r31 = 1
00101001010111110000000001000110                #beq r31, r10, 71 // if(A+B = 1), jump
00000111111111110000000000000001                #addi r31, r31, 1 // r31 = 2
00101001010111110000000001000111                #beq r31, r10, 72 // if(A+B = 2), jump
00000111111111110000000000000001                #addi r31, r31, 1 // r31 = 3
00101001010111110000000001001000                #beq r31, r10, 73 // if(A+B = 3), jump
00000111111111110000000000000001                #addi r31, r31, 1 // r31 = 4
00101001010111110000000001001001                #beq r31, r10, 74 // if(A+B = 4), jump
00000111111111110000000000000001                #addi r31, r31, 1 // r31 = 5
00101001010111110000000001001010                #beq r31, r10, 75 // if(A+B = 5), jump
00000111111111110000000000000001                #addi r31, r31, 1 // r31 = 6
00101001010111110000000001001011                #beq r31, r10, 76 // if(A+B = 6), jump
00000111111111110000000000000001                #addi r31, r31, 1 // r31 = 7
00101001010111110000000001001100                #beq r31, r10, 77 // if(A+B = 7), jump
00000111111111110000000000000001                #addi r31, r31, 1 // r31 = 8
00101001010111110000000001001101                #beq r31, r10, 78 // if(A+B = 8), jump
00000111111111110000000000000001                #addi r31, r31, 1 // r31 = 9
00101001010111110000000001001110                #beq r31, r10, 79 // if(A+B = 9), jump
00000111111111110000000000000001                #addi r31, r31, 1 // r31 = 10
00101001010111110000000001001111                #beq r31, r10, 80 // if(A+B = 10), jump
00000111111111110000000000000001                #addi r31, r31, 1 // r31 = 11
00101001010111110000000001010000                #beq r31, r10, 81 // if(A+B = 11), jump
00000111111111110000000000000001                #addi r31, r31, 1 // r31 = 12
00101001010111110000000001010001                #beq r31, r10, 82 // if(A+B = 12), jump
00000111111111110000000000000001                #addi r31, r31, 1 // r31 = 13
00101001010111110000000001010010                #beq r31, r10, 83 // if(A+B = 13), jump
00000111111111110000000000000001                #addi r31, r31, 1 // r31 = 14
00101001010111110000000001010011                #beq r31, r10, 84 // if(A+B = 14), jump
00000111111111110000000000000001                #addi r31, r31, 1 // r31 = 15
00101001010111110000000001010100                #beq r31, r10, 85 // if(A+B = 15), jump
00000111111111110000000000000001                #addi r31, r31, 1 // r31 = 16
00101001010111110000000001010101                #beq r31, r10, 86 // if(A+B = 16), jump
00000111111111110000000000000001                #addi r31, r31, 1 // r31 = 17
00101001010111110000000001010110                #beq r31, r10, 87 // if(A+B = 17), jump
00000111111111110000000000000001                #addi r31, r31, 1 // r31 = 18
00101001010111110000000001010111                #beq r31, r10, 88 // if(A+B = 18), jump
00000111111111110000000000000001                #addi r31, r31, 1 // r31 = 19
00101001010111110000000001011000                #beq r31, r10, 89 // if(A+B = 19), jump
00000111111111110000000000000001                #addi r31, r31, 1 // r31 = 20
00101001010111110000000001011001                #beq r31, r10, 90 // if(A+B = 20), jump
00000111111111110000000000000001                #addi r31, r31, 1 // r31 = 21
00101001010111110000000001011010                #beq r31, r10, 91 // if(A+B = 11), jump
00000111111111110000000000000001                #addi r31, r31, 1 // r31 = 22
00101001010111110000000001011011                #beq r31, r10, 92 // if(A+B = 22), jump
00000111111111110000000000000001                #addi r31, r31, 1 // r31 = 23
00101001010111110000000001011100                #beq r31, r10, 93 // if(A+B = 23), jump
00000111111111110000000000000001                #addi r31, r31, 1 // r31 = 24
00101001010111110000000001011101                #beq r31, r10, 94 // if(A+B = 24), jump
00000111111111110000000000000001                #addi r31, r31, 1 // r31 = 25
00101001010111110000000001011110                #beq r31, r10, 95 // if(A+B = 25), jump
00000111111111110000000000000001                #addi r31, r31, 1 // r31 = 26
00101001010111110000000001011111                #beq r31, r10, 96 // if(A+B = 26), jump
00000111111111110000000000000001                #addi r31, r31, 1 // r31 = 27
00101001010111110000000001100000                #beq r31, r10, 97 // if(A+B = 27), jump
00000111111111110000000000000001                #addi r31, r31, 1 // r31 = 28
00101001010111110000000001100001                #beq r31, r10, 98 // if(A+B = 28), jump
00000111111111110000000000000001                #addi r31, r31, 1 // r31 = 29
00101001010111110000000001100010                #beq r31, r10, 99 // if(A+B = 29), jump
00000111111111110000000000000001                #addi r31, r31, 1 // r31 = 30
00101001010111110000000001100011                #beq r31, r10, 100 // if(A+B = 30), jump
00000111111111110000000000000001                #addi r31, r31, 1 // r31 = 31
00101001010111110000000001100100                #beq r31, r10, 101 // if(A+B = 31), jump
00000001000010010100000000010000                #add r8, r9, r8 // B = L[j]+A+B <<< (A+B)
00100000110010000000000000000100                #sw r8, r6, 4 // Mem[4+r6] = L[j] = r8 = (L[i]+A+B)<<<(A+B)
00000100101001010000000000000001                #addi r5, r5, 1 // r5 += 1 (i += 1)
00101011100001010000000001100011                #beq r5, r28, // if(i = 26), jump
00000100110001100000000000000001                #addi r6, r6, 1 // r6 = j+1 = x…x
00010100110001100000000000011110                #shl r6, r6, 30 // r6 = j+1 = xx0…0
00011000110001100000000000011110                #shr r6, r6, 30 // r6 = j+1 = 0…0xx (%c = 4)
00000111110111100000000000000001                #addi r30, r30, 1 // r30 +=1 (k +=1)
00101111101111101111111110101011                #bne r30, r29, -85 // LOOP back
11111100000000000000000000000000                #hal // Stop
00011001000010010000000000011111                #shr r9, r8, 31 // r9 = 0…0x of L[j] + A + B
00010101000010000000000000000001                #shl r8, r8, 1 // r8 = x…x0 of L[j]+A+B
00101001000010001111111111110011                #beq r8, r8, -14 // jump back to program
00011001000010010000000000011110                #shr r9, r8, 30
00010101000010000000000000000010                #shl r8, r8, 2
00101001000010001111111111110000                #beq r8, r8, -17
00011001000010010000000000011101                #shr r9, r8, 29
00010101000010000000000000000011                #shl r8, r8, 3
00101001000010001111111111101101                #beq r8, r8, -20
00011001000010010000000000011100                #shr r9, r8, 28
00010101000010000000000000000100                #shl r8, r8, 4
00101001000010001111111111101010                #beq r8, r8, -23
00011001000010010000000000011011                #shr r9, r8, 27
00010101000010000000000000000101                #shl r8, r8, 5
00101001000010001111111111100111                #beq r8, r8, -26
00011001000010010000000000011010                #shr r9, r8, 26
00010101000010000000000000000110                #shl r8, r8, 6
00101001000010001111111111100100                #beq r8, r8, -29
00011001000010010000000000011001                #shr r9, r8, 25
00010101000010000000000000000111                #shl r8, r8, 7
00101001000010001111111111100001                #beq r8, r8, -32
00011001000010010000000000011000                #shr r9, r8, 24
00010101000010000000000000001000                #shl r8, r8, 8
00101001000010001111111111011110                #beq r8, r8, -35
00011001000010010000000000010111                #shr r9, r8, 23
00010101000010000000000000001001                #shl r8, r8, 9
00101001000010001111111111011011                #beq r8, r8, -38
00011001000010010000000000010110                #shr r9, r8, 22
00010101000010000000000000001010                #shl r8, r8, 10
00101001000010001111111111011000                #beq r8, r8, -41
00011001000010010000000000010101                #shr r9, r8, 21
00010101000010000000000000001011                #shl r8, r8, 11
00101001000010001111111111010101                #beq r8, r8, -44
00011001000010010000000000010100                #shr r9, r8, 20
00010101000010000000000000001100                #shl r8, r8, 12
00101001000010001111111111010010                #beq r8, r8, -47
00011001000010010000000000010011                #shr r9, r8, 19
00010101000010000000000000001101                #shl r8, r8, 13
00101001000010001111111111001111                #beq r8, r8, -50
00011001000010010000000000010010                #shr r9, r8, 18
00010101000010000000000000001110                #shl r8, r8, 14
00101001000010001111111111001100                #beq r8, r8, -53
00011001000010010000000000010001                #shr r9, r8, 17
00010101000010000000000000001111                #shl r8, r8, 15
00101001000010001111111111001001                #beq r8, r8, -56
00011001000010010000000000010000                #shr r9, r8, 16
00010101000010000000000000010000                #shl r8, r8, 16
00101001000010001111111111000110                #beq r8, r8, -59
00011001000010010000000000001111                #shr r9, r8, 15
00010101000010000000000000010001                #shl r8, r8, 17
00101001000010001111111111000011                #beq r8, r8, -62
00011001000010010000000000001110                #shr r9, r8, 14
00010101000010000000000000010010                #shl r8, r8, 18
00101001000010001111111111000000                #beq r8, r8, -65
00011001000010010000000000001101                #shr r9, r8, 13
00010101000010000000000000010011                #shl r8, r8, 19
00101001000010001111111110111101                #beq r8, r8, -68
00011001000010010000000000001100                #shr r9, r8, 12
00010101000010000000000000010100                #shl r8, r8, 20
00101001000010001111111110111010                #beq r8, r8, -71
00011001000010010000000000001011                #shr r9, r8, 11
00010101000010000000000000010101                #shl r8, r8, 21
00101001000010001111111110110111                #beq r8, r8, -74
00011001000010010000000000001010                #shr r9, r8, 10
00010101000010000000000000010110                #shl r8, r8, 22
00101001000010001111111110110100                #beq r8, r8, -77
00011001000010010000000000001001                #shr r9, r8, 9
00010101000010000000000000010111                #shl r8, r8, 23
00101001000010001111111110110001                #beq r8, r8, -80
00011001000010010000000000001000                #shr r9, r8, 8
00010101000010000000000000011000                #shl r8, r8, 24
00101001000010001111111110101110                #beq r8, r8, -83
00011001000010010000000000000111                #shr r9, r8, 7
00010101000010000000000000011001                #shl r8, r8, 25
00101001000010001111111110101011                #beq r8, r8, -86
00011001000010010000000000000110                #shr r9, r8, 6
00010101000010000000000000011010                #shl r8, r8, 26
00101001000010001111111110101000                #beq r8, r8, -89
00011001000010010000000000000101                #shr r9, r8, 5
00010101000010000000000000011011                #shl r8, r8, 27
00101001000010001111111110100101                #beq r8, r8, -92
00011001000010010000000000000100                #shr r9, r8, 4
00010101000010000000000000011100                #shl r8, r8, 28
00101001000010001111111110100010                #beq r8, r8, -95
00011001000010010000000000000011                #shr r9, r8, 3
00010101000010000000000000011101                #shl r8, r8, 29
00101001000010001111111110011111                #beq r8, r8, -98
00011001000010010000000000000010                #shr r9, r8, 2
00010101000010000000000000011110                #shl r8, r8, 30
00101001000010001111111110011100                #beq r8, r8, -101
00011001000010010000000000000001                #shr r9, r8, 1
00010101000010000000000000011111                #shl r8, r8, 31
00101001000010001111111110011001                #beq r8, r8, -104
00000000101001010010100000010001                #sub r5, r5, r5 // r5 = 0
00101000101001011111111110011011                #beq r5, r5, // jump back to program
